{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOApSTZzFDJKx+erF/4jLLV"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["pip install requests pandas matplotlib"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"--mtIbYP98A7","executionInfo":{"status":"ok","timestamp":1734881040754,"user_tz":-60,"elapsed":3375,"user":{"displayName":"Angelo Leone","userId":"17199535585749961306"}},"outputId":"53ef1c29-4875-409f-9b6c-245f010e7d21"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (2.32.3)\n","Requirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (2.2.2)\n","Requirement already satisfied: matplotlib in /usr/local/lib/python3.10/dist-packages (3.8.0)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests) (3.4.0)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests) (3.10)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests) (2.2.3)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests) (2024.12.14)\n","Requirement already satisfied: numpy>=1.22.4 in /usr/local/lib/python3.10/dist-packages (from pandas) (1.26.4)\n","Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas) (2.8.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas) (2024.2)\n","Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.10/dist-packages (from pandas) (2024.2)\n","Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (1.3.1)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (0.12.1)\n","Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (4.55.3)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (1.4.7)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (24.2)\n","Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (11.0.0)\n","Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (3.2.0)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.2->pandas) (1.17.0)\n"]}]},{"cell_type":"code","execution_count":12,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5dsBvZ9X2JQY","executionInfo":{"status":"ok","timestamp":1734882293598,"user_tz":-60,"elapsed":17932,"user":{"displayName":"Angelo Leone","userId":"17199535585749961306"}},"outputId":"c4060d19-1bc1-4bad-ccb8-e05b912658e2"},"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Fetching data for CPIH Goods...\n","Successfully processed 443 months of data\n","\n","Fetching data for CPIH Services...\n","Successfully processed 443 months of data\n","\n","Fetching data for CPIH Transport...\n","Successfully processed 443 months of data\n","\n","Fetching data for CPIH Gas...\n","Successfully processed 443 months of data\n","\n","Fetching data for RPI All Items...\n","Successfully processed 431 months of data\n","\n","Fetching data for CPI Annual Rate...\n","Successfully processed 443 months of data\n","\n","Fetching data for CPIH Food...\n","Successfully processed 443 months of data\n","\n","Fetching data for RPI Housing...\n","Successfully processed 443 months of data\n","\n","Fetching data for CPI Monthly Rate...\n","Successfully processed 455 months of data\n","\n","Files saved:\n","- Grid chart specification: ons_json/grid_chart_spec.json\n","- Interactive HTML chart: ons_json/grid_chart.html\n","- Combined data: ons_json/all_series.csv\n","- Individual JSON files for each series in ons_json/\n","\n","Script completed\n"]}],"source":["import requests\n","import pandas as pd\n","import altair as alt\n","import json\n","import os\n","\n","# Create directory for JSON files\n","if not os.path.exists('ons_json'):\n","    os.makedirs('ons_json')\n","\n","# Configure Altair for larger datasets\n","alt.data_transformers.disable_max_rows()\n","\n","# Define 9 series focusing on prices and inflation\n","series_info = [\n","    {\n","        'id': 'L52F',\n","        'name': 'CPIH Goods',\n","        'uri': '/economy/inflationandpriceindices/timeseries/l52f/mm23'\n","    },\n","    {\n","        'id': 'L52G',\n","        'name': 'CPIH Services',\n","        'uri': '/economy/inflationandpriceindices/timeseries/l52g/mm23'\n","    },\n","    {\n","        'id': 'L529',\n","        'name': 'CPIH Transport',\n","        'uri': '/economy/inflationandpriceindices/timeseries/l529/mm23'\n","    },\n","    {\n","        'id': 'L53F',\n","        'name': 'CPIH Gas',\n","        'uri': '/economy/inflationandpriceindices/timeseries/l53f/mm23'\n","    },\n","    {\n","        'id': 'L55O',\n","        'name': 'RPI All Items',\n","        'uri': '/economy/inflationandpriceindices/timeseries/l55o/mm23'\n","    },\n","    {\n","        'id': 'D7BT',\n","        'name': 'CPI Annual Rate',\n","        'uri': '/economy/inflationandpriceindices/timeseries/d7bt/mm23'\n","    },\n","    {\n","        'id': 'L522',\n","        'name': 'CPIH Food',\n","        'uri': '/economy/inflationandpriceindices/timeseries/l522/mm23'\n","    },\n","    {\n","        'id': 'L55L',\n","        'name': 'RPI Housing',\n","        'uri': '/economy/inflationandpriceindices/timeseries/l55l/mm23'\n","    },\n","    {\n","        'id': 'DOBP',\n","        'name': 'CPI Monthly Rate',\n","        'uri': '/economy/inflationandpriceindices/timeseries/dobp/mm23'\n","    }\n","]\n","\n","def fetch_and_save_ons_data(uri, series_id):\n","    \"\"\"Fetch data and save to JSON file\"\"\"\n","    base_url = 'https://api.beta.ons.gov.uk/v1/data'\n","    cors_proxy = 'https://eco-cors-proxy.netlify.app/proxy?url='\n","    url = f\"{cors_proxy}{base_url}?uri={uri}\"\n","\n","    try:\n","        response = requests.get(url)\n","        response.raise_for_status()\n","        data = response.json()\n","\n","        # Save raw JSON\n","        filename = f'ons_json/{series_id}.json'\n","        with open(filename, 'w') as f:\n","            json.dump(data, f)\n","\n","        return data\n","    except requests.RequestException as e:\n","        print(f\"Error fetching data: {e}\")\n","        return None\n","\n","def process_data(data, series_name):\n","    \"\"\"Process the JSON data into a DataFrame\"\"\"\n","    if not data or 'months' not in data:\n","        print(f\"No monthly data found for {series_name}\")\n","        return None\n","\n","    df = pd.DataFrame(data['months'])\n","    df['date'] = pd.to_datetime(df['date'], format='%Y %b')\n","    df['series'] = series_name\n","    df['value'] = pd.to_numeric(df['value'], errors='coerce')\n","\n","    return df\n","\n","# Collect data for all series\n","all_data = []\n","\n","for series in series_info:\n","    print(f\"\\nFetching data for {series['name']}...\")\n","    data = fetch_and_save_ons_data(series['uri'], series['id'])\n","\n","    if data:\n","        df = process_data(data, series['name'])\n","        if df is not None:\n","            all_data.append(df)\n","            print(f\"Successfully processed {len(df)} months of data\")\n","        else:\n","            print(f\"Failed to process data for {series['name']}\")\n","    else:\n","        print(f\"No data received for {series['name']}\")\n","\n","if all_data:\n","    # Combine all data\n","    combined_df = pd.concat(all_data, ignore_index=True)\n","\n","    # Create base chart\n","    base = alt.Chart(combined_df).mark_line().encode(\n","        x=alt.X('date:T',\n","                title='Date',\n","                axis=alt.Axis(format='%Y', labelAngle=-45)),\n","        y=alt.Y('value:Q',\n","                title='Value',\n","                scale=alt.Scale(zero=False)),\n","        tooltip=[\n","            alt.Tooltip('date:T', title='Date', format='%Y-%m'),\n","            alt.Tooltip('value:Q', title='Value', format='.1f')\n","        ]\n","    ).properties(\n","        width=300,\n","        height=200\n","    )\n","\n","    # Create faceted chart\n","    grid_chart = base.facet(\n","        facet=alt.Facet('series:N',\n","                       title=None),\n","        columns=3\n","    ).properties(\n","        title=alt.TitleParams(\n","            'UK Price Indices and Inflation Rates',\n","            fontSize=20\n","        )\n","    ).configure_axis(\n","        labelFontSize=8,\n","        titleFontSize=10\n","    ).configure_header(\n","        titleFontSize=12,\n","        labelFontSize=10\n","    ).configure_title(\n","        fontSize=16,\n","        anchor='middle'\n","    )\n","\n","    # Save the chart specification as JSON\n","    chart_spec = grid_chart.to_dict()\n","    with open('ons_json/grid_chart_spec.json', 'w') as f:\n","        json.dump(chart_spec, f)\n","\n","    # Also save as HTML for easy viewing\n","    grid_chart.save('ons_json/grid_chart.html')\n","\n","    # Save the combined data\n","    combined_df.to_csv('ons_json/all_series.csv', index=False)\n","\n","    print(\"\\nFiles saved:\")\n","    print(\"- Grid chart specification: ons_json/grid_chart_spec.json\")\n","    print(\"- Interactive HTML chart: ons_json/grid_chart.html\")\n","    print(\"- Combined data: ons_json/all_series.csv\")\n","    print(\"- Individual JSON files for each series in ons_json/\")\n","\n","else:\n","    print(\"No data was successfully collected\")\n","\n","print(\"\\nScript completed\")"]}]}